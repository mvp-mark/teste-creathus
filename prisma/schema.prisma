generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  LikedMovie    LikedMovie[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id               String       @id @default(cuid())
  title            String
  overview         String?      @db.Text
  originalTitle    String?
  originalLanguage String?
  description      String?      @db.Text
  releaseDate      DateTime
  poster           String?
  backdrop         String?
  popularity       Float
  voteCount        Int
  voteAverage      Float
  adult            Boolean
  video            Boolean
  movieId          Int          @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  LikedMovie       LikedMovie[]
}

model LikedMovie {
  userId  String
  movieId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie   Movie  @relation(fields: [movieId], references: [movieId], onDelete: Cascade)

  @@id([userId, movieId])
  @@index([userId])
  @@index([movieId])
}
