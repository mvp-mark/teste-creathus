import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "utils/api";
import { Drawer } from "components/drawer";
import { useState } from "react";
import { Movie } from "server/api/routers/tmdb";
import { Stars } from "components/stars";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const getAll = api.example.getAll.useQuery();
  const playingNow = api.tmdb.now_playing.useQuery();
  const [text, setText] = useState("pokemon");
  const data = api.tmdb.search.useQuery({ search: text });

  console.log({ data });

  return (
    <>
      <Drawer>
        <Head>
          <title>Creathus</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
          <h1 className="my-4 text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Creathus <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>

          {/* <div className="flex flex-row"> */}
          <div className="grid grid-cols-7 gap-4">
            {playingNow.data
              ? playingNow.data.map((todo: Movie) => (
                  <div
                    key={todo.id}
                    className="flex flex-col items-center gap-4"
                  >
                    <Image
                      src={
                        "https://image.tmdb.org/t/p/w185/" + todo.poster_path
                      }
                      width={185}
                      height={278}
                      className="rounded-xl shadow-2xl shadow-orange-500  hover:shadow-lg hover:shadow-orange-500 "
                      alt={todo.title ?? todo.original_title}
                    />
                    <Stars rating={todo.vote_average} />
                    {todo.title ?? todo.original_title}
                  </div>
                ))
              : "Loading tRPC query..."}
            {data.data
              ? data.data.map((todo: Movie) => (
                  <div
                    key={todo.id}
                    className="flex flex-col items-center gap-4"
                  >
                    <Image
                      src={
                        "https://image.tmdb.org/t/p/w185/" + todo.poster_path
                      }
                      width={185}
                      height={278}
                      className="rounded-xl shadow-2xl shadow-orange-500  hover:shadow-lg hover:shadow-orange-500 "
                      alt={todo.title ?? todo.original_title}
                    />
                    <Stars rating={todo.vote_average} />
                    {todo.title ?? todo.original_title}
                  </div>
                ))
              : "Loading tRPC query..."}
          </div>

          {/* </div> */}

          <div className="flex flex-col items-center gap-2"></div>
          {/* </div> */}
        </main>
      </Drawer>
    </>
  );
};

export default Home;

// create a form to use a mutation
// const CreateTodoForm: React.FC = () => {

//   return (
//     <form
//       onSubmit={async (e) => {
//         e.preventDefault();
//         await mutate({ text });
//         setText("");
//       }}
//     >
//       <input
//         value={text}
//         onChange={(e) => setText(e.target.value)}
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//       />
//       <button type="submit">Create</button>
//     </form>
//   );
// };
